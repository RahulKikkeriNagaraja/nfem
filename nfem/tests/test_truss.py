'''
Tests for the Truss element
'''

import numpy as np
from numpy.testing import assert_allclose
from unittest import TestCase

from .. import Node, Truss

class TestTruss(TestCase):
    def setUp(self):
        node_a = Node(id='A', x=0, y=0, z=0)
        node_b = Node(id='B', x=1, y=2, z=3)

        node_b.x += 0.1

        self.truss = Truss(id=1, node_a=node_a, node_b=node_b, youngs_modulus=1, area=1)

    def test_stiffness(self):
        k_actual = self.truss.calculate_stiffness_matrix()

        # values from Truss.xls
        k_expected = [
            [ 0.025103466943026,  0.041998194741606,  0.062997292612409, -0.025103466943026, -0.041998194741606, -0.062997292612409],
            [ 0.041998194741606,  0.07836481431434 ,  0.114540532      , -0.041998194741606, -0.07836481431434 , -0.114540532      ],
            [ 0.062997292612409,  0.114540532      ,  0.17381525731434 , -0.062997292612409, -0.114540532      , -0.17381525731434 ],
            [-0.025103466943026, -0.041998194741606, -0.062997292612409,  0.025103466943026,  0.041998194741606,  0.062997292612409],
            [-0.041998194741606, -0.07836481431434 , -0.114540532      ,  0.041998194741606,  0.07836481431434 ,  0.114540532      ],
            [-0.062997292612409, -0.114540532      , -0.17381525731434 ,  0.062997292612409,  0.114540532      ,  0.17381525731434 ],
        ]

        assert_allclose(k_actual, k_expected)

    def test_elastic_stiffness(self):
        k_e_actual = self.truss.calculate_elastic_stiffness_matrix()

        # values from Truss.xls
        k_e_expected = [
            [ 0.019090089,  0.038180177,  0.057270266, -0.019090089, -0.038180177, -0.057270266],
            [ 0.038180177,  0.076360355,  0.114540532, -0.038180177, -0.076360355, -0.114540532],
            [ 0.057270266,  0.114540532,  0.171810798, -0.057270266, -0.114540532, -0.171810798],
            [-0.019090089, -0.038180177, -0.057270266,  0.019090089,  0.038180177,  0.057270266],
            [-0.038180177, -0.076360355, -0.114540532,  0.038180177,  0.076360355,  0.114540532],
            [-0.057270266, -0.114540532, -0.171810798,  0.057270266,  0.114540532,  0.171810798]
        ]

        assert_allclose(k_e_actual, k_e_expected)

    def test_initial_displacement_stiffness(self):
        k_u_actual = self.truss.calculate_initial_displacement_stiffness_matrix()

        # values from Truss.xls
        k_u_expected = [
            [ 0.004008918628686,  0.003818017741606,  0.005727026612409, -0.004008918628686, -0.003818017741606, -0.005727026612409],
            [ 0.003818017741606,  0.000000000000000,  0.000000000000000, -0.003818017741606,  0.000000000000000,  0.000000000000000],
            [ 0.005727026612409,  0.000000000000000,  0.000000000000000, -0.005727026612409,  0.000000000000000,  0.000000000000000],
            [-0.004008918628686, -0.003818017741606, -0.005727026612409,  0.004008918628686,  0.003818017741606,  0.005727026612409],
            [-0.003818017741606,  0.000000000000000,  0.000000000000000,  0.003818017741606,  0.000000000000000,  0.000000000000000],
            [-0.005727026612409,  0.000000000000000,  0.000000000000000,  0.005727026612409,  0.000000000000000,  0.000000000000000]
        ]

        assert_allclose(k_u_actual, k_u_expected, atol=1e-7)

    def test_geometric_stiffness(self):
        k_g_actual = self.truss.calculate_geometric_stiffness_matrix()

        # values from Truss.xls
        k_g_expected = [
            [ 2.00445931434E-03,  0.00000000000E+00,  0.00000000000E+00, -2.00445931434E-03,  0.00000000000E+00,  0.00000000000E+00],
            [ 0.00000000000E+00,  2.00445931434E-03,  0.00000000000E+00,  0.00000000000E+00, -2.00445931434E-03,  0.00000000000E+00],
            [ 0.00000000000E+00,  0.00000000000E+00,  2.00445931434E-03,  0.00000000000E+00,  0.00000000000E+00, -2.00445931434E-03],
            [-2.00445931434E-03,  0.00000000000E+00,  0.00000000000E+00,  2.00445931434E-03,  0.00000000000E+00,  0.00000000000E+00],
            [ 0.00000000000E+00, -2.00445931434E-03,  0.00000000000E+00,  0.00000000000E+00,  2.00445931434E-03,  0.00000000000E+00],
            [ 0.00000000000E+00,  0.00000000000E+00, -2.00445931434E-03,  0.00000000000E+00,  0.00000000000E+00,  2.00445931434E-03]
        ]

        assert_allclose(k_g_actual, k_g_expected)
